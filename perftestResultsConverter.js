function parse(str) {
    return str
        .trim()
        .split("\n")
        .map(line => line
            .trim()
            .split(" ")
            .map(num => parseFloat(num))
        )
        .map(nums => ({
            n: nums[0],
            m: nums[1],
            k: nums[2],
            t: nums[3],
        }));
}

function getKey(obj) {
    return `${obj.n}_${obj.m}_${obj.k}`;
}

const inputs = {
    noSet_rec: `
        10 1 8 36609
        10 2 8 257300
        10 5 8 2408
        10 10 8 262
        11 1 8 63312
        11 11 8 277
        12 1 8 102881
        12 2 8 699113
        12 3 8 88940
        12 4 8 15561
        12 6 8 2742
        12 12 8 454
        13 1 8 166352
        13 13 8 262
        14 1 8 253996
        14 2 8 1.76859e+06
        14 7 8 2089
        14 14 8 325
        15 1 8 384583
        15 3 8 260818
        15 5 8 14742
        15 15 8 249
        16 1 8 698555
        16 2 8 3.75185e+06
        16 4 8 67157
        16 8 8 2537
        16 16 8 268
        17 1 8 1.00803e+06
        17 17 8 413
        18 1 8 1.11731e+06
        18 2 8 7.43433e+06
        18 3 8 691415
        18 6 8 19978
        18 9 8 2486
        18 18 8 275
        19 1 8 1.52516e+06
        19 19 8 280
        20 1 8 2.07632e+06
        20 2 8 1.37492e+07
        20 4 8 256836
        20 5 8 72475
        20 10 8 2215
        20 20 8 1050
        21 1 8 3.11186e+06
        21 3 8 1.80562e+06
        21 7 8 16943
        21 21 8 332
        22 1 8 3.71041e+06
        22 2 8 2.41071e+07
        22 11 8 2287
        22 22 8 294
        23 1 8 4.88783e+06
        23 23 8 285
        24 1 8 6.18559e+06
        24 2 8 4.11631e+07
        24 3 8 3.82432e+06
        24 4 8 719182
        24 6 8 67575
        24 8 8 16814
        24 12 8 2740
        24 24 8 352
        25 1 8 7.6479e+06
        25 5 8 246750
        25 25 8 361
        26 1 8 9.77698e+06
        26 2 8 6.48667e+07
        26 13 8 2917
        26 26 8 369
        10 1 9 436678
        10 2 9 1.28719e+06
        10 5 9 4222
        10 10 9 329
        11 1 9 692695
        11 11 9 328
        12 1 9 1.59806e+06
        12 2 9 6.35606e+06
        12 3 9 315684
        12 4 9 45501
        12 6 9 3965
        12 12 9 385
        13 1 9 2.14738e+06
        13 13 9 275
        14 1 9 3.53944e+06
        14 2 9 1.21121e+07
        14 7 9 4677
        14 14 9 423
        15 1 9 5.74609e+06
        15 3 9 1.27776e+06
        15 5 9 51377
        15 15 9 599
        16 1 9 1.05701e+07
        16 2 9 3.07237e+07
        16 4 9 285016
        16 8 9 4498
        16 16 9 811
        10 1 10 4.92763e+06
        10 2 10 6.19218e+06
        10 5 10 7996
        10 10 10 384
        11 1 10 7.48912e+06
        11 11 10 676
        8 1 11 6.36689e+06
        8 2 11 4.38208e+06
        8 4 11 16019
        8 8 11 356
        7 1 12 1.11046e+07
        7 7 12 540
        5 1 13 3.25316e+06
        5 5 13 558
        5 1 14 1.10441e+07
        5 5 14 431
    `,
    set_rec: `
        10 1 8 30576
        10 2 8 1877
        10 5 8 44
        10 10 8 5
        11 1 8 53720
        11 11 8 7
        12 1 8 88508
        12 2 8 4089
        12 3 8 847
        12 4 8 252
        12 6 8 52
        12 12 8 6
        13 1 8 139597
        13 13 8 7
        14 1 8 224716
        14 2 8 9226
        14 7 8 54
        14 14 8 7
        15 1 8 337064
        15 3 8 2567
        15 5 8 284
        15 15 8 7
        16 1 8 475570
        16 2 8 19159
        16 4 8 1009
        16 8 8 55
        16 16 8 12
        17 1 8 677798
        17 17 8 8
        18 1 8 935398
        18 2 8 32301
        18 3 8 6817
        18 6 8 325
        18 9 8 59
        18 18 8 7
        19 1 8 1.4582e+06
        19 19 8 9
        20 1 8 1.72318e+06
        20 2 8 59614
        20 4 8 2935
        20 5 8 1094
        20 10 8 61
        20 20 8 10
        21 1 8 2.35614e+06
        21 3 8 15690
        21 7 8 330
        21 21 8 9
        22 1 8 3.2947e+06
        22 2 8 100666
        22 11 8 67
        22 22 8 8
        23 1 8 4.12544e+06
        23 23 8 9
        24 1 8 5.52521e+06
        24 2 8 171987
        24 3 8 33601
        24 4 8 7972
        24 6 8 1292
        24 8 8 347
        24 12 8 63
        24 24 8 8
        25 1 8 6.62734e+06
        25 5 8 3388
        25 25 8 9
        26 1 8 8.53426e+06
        26 2 8 263079
        26 13 8 65
        26 26 8 7
        10 1 9 376386
        10 2 9 9457
        10 5 9 170
        10 10 9 7
        11 1 9 614056
        11 11 9 12
        12 1 9 1.34272e+06
        12 2 9 27120
        12 3 9 3584
        12 4 9 827
        12 6 9 101
        12 12 9 9
        13 1 9 2.74658e+06
        13 13 9 11
        14 1 9 3.23745e+06
        14 2 9 62387
        14 7 9 109
        14 14 9 9
        15 1 9 5.1308e+06
        15 3 9 12667
        15 5 9 876
        15 15 9 9
        16 1 9 7.56165e+06
        16 2 9 135809
        16 4 9 4058
        16 8 9 106
        16 16 9 8
        10 1 10 4.49328e+06
        10 2 10 45281
        10 5 10 279
        10 10 10 9
        11 1 10 7.85519e+06
        11 11 10 10
        8 1 11 5.9345e+06
        8 2 11 39939
        8 4 11 304
        8 8 11 12
        7 1 12 9.77363e+06
        7 7 12 11
        5 1 13 2.81896e+06
        5 5 13 14
        5 1 14 9.84528e+06
        5 5 14 13
    `,
    set: `
        10 1 8 16023
        10 2 8 1371
        10 5 8 36
        10 10 8 4
        11 1 8 29412
        11 11 8 6
        12 1 8 48413
        12 2 8 3472
        12 3 8 759
        12 4 8 253
        12 6 8 49
        12 12 8 4
        13 1 8 76549
        13 13 8 6
        14 1 8 118853
        14 2 8 8257
        14 7 8 50
        14 14 8 6
        15 1 8 179060
        15 3 8 2314
        15 5 8 274
        15 15 8 5
        16 1 8 275852
        16 2 8 14425
        16 4 8 952
        16 8 8 53
        16 16 8 5
        17 1 8 391522
        17 17 8 6
        18 1 8 518718
        18 2 8 27122
        18 3 8 5722
        18 6 8 294
        18 9 8 58
        18 18 8 7
        19 1 8 788421
        19 19 8 6
        20 1 8 998740
        20 2 8 47582
        20 4 8 2799
        20 5 8 985
        20 10 8 63
        20 20 8 7
        21 1 8 1.54214e+06
        21 3 8 12681
        21 7 8 307
        21 21 8 6
        22 1 8 1.85916e+06
        22 2 8 84403
        22 11 8 67
        22 22 8 6
        23 1 8 2.27003e+06
        23 23 8 6
        24 1 8 3.0854e+06
        24 2 8 141480
        24 3 8 24604
        24 4 8 7386
        24 6 8 1067
        24 8 8 326
        24 12 8 61
        24 24 8 6
        25 1 8 3.57268e+06
        25 5 8 3101
        25 25 8 8
        26 1 8 4.6721e+06
        26 2 8 208481
        26 13 8 67
        26 26 8 7
        10 1 9 246083
        10 2 9 8673
        10 5 9 91
        10 10 9 7
        11 1 9 321356
        11 11 9 8
        12 1 9 711308
        12 2 9 21792
        12 3 9 3009
        12 4 9 737
        12 6 9 103
        12 12 9 6
        13 1 9 1.33375e+06
        13 13 9 8
        14 1 9 1.97457e+06
        14 2 9 51948
        14 7 9 99
        14 14 9 7
        15 1 9 2.71851e+06
        15 3 9 10883
        15 5 9 979
        15 15 9 6
        16 1 9 4.29985e+06
        16 2 9 110632
        16 4 9 4407
        16 8 9 103
        16 16 9 6
        10 1 10 2.24509e+06
        10 2 10 38175
        10 5 10 194
        10 10 10 8
        11 1 10 3.42488e+06
        11 11 10 9
        8 1 11 2.85753e+06
        8 2 11 34562
        8 4 11 307
        8 8 11 9
        7 1 12 5.31095e+06
        7 7 12 9
        5 1 13 1.30792e+06
        5 5 13 11
        5 1 14 6.16906e+06
        5 5 14 11
    `,
    noSet: `
        10 1 8 16809
        10 2 8 1849
        10 5 8 48
        10 10 8 4
        11 1 8 30335
        11 11 8 6
        12 1 8 47997
        12 2 8 3998
        12 3 8 726
        12 4 8 258
        12 6 8 48
        12 12 8 5
        13 1 8 76607
        13 13 8 6
        14 1 8 118735
        14 2 8 7564
        14 7 8 50
        14 14 8 5
        15 1 8 176992
        15 3 8 2198
        15 5 8 279
        15 15 8 6
        16 1 8 269632
        16 2 8 14996
        16 4 8 1031
        16 8 8 64
        16 16 8 5
        17 1 8 390032
        17 17 8 5
        18 1 8 532397
        18 2 8 27517
        18 3 8 5797
        18 6 8 310
        18 9 8 64
        18 18 8 6
        19 1 8 735299
        19 19 8 7
        20 1 8 1.01655e+06
        20 2 8 53866
        20 4 8 2886
        20 5 8 1197
        20 10 8 70
        20 20 8 6
        21 1 8 1.32252e+06
        21 3 8 13222
        21 7 8 322
        21 21 8 7
        22 1 8 1.74404e+06
        22 2 8 82425
        22 11 8 62
        22 22 8 7
        23 1 8 2.31321e+06
        23 23 8 6
        24 1 8 3.10398e+06
        24 2 8 137459
        24 3 8 24230
        24 4 8 6862
        24 6 8 1060
        24 8 8 328
        24 12 8 56
        24 24 8 6
        25 1 8 3.75953e+06
        25 5 8 3039
        25 25 8 7
        26 1 8 4.63719e+06
        26 2 8 212695
        26 13 8 71
        26 26 8 6
        10 1 9 218321
        10 2 9 7994
        10 5 9 99
        10 10 9 8
        11 1 9 326909
        11 11 9 8
        12 1 9 596741
        12 2 9 23917
        12 3 9 2911
        12 4 9 747
        12 6 9 109
        12 12 9 7
        13 1 9 1.03116e+06
        13 13 9 7
        14 1 9 2.00947e+06
        14 2 9 49900
        14 7 9 93
        14 14 9 6
        15 1 9 2.82515e+06
        15 3 9 11491
        15 5 9 801
        15 15 9 7
        16 1 9 4.27121e+06
        16 2 9 117982
        16 4 9 4032
        16 8 9 101
        16 16 9 7
        10 1 10 2.1862e+06
        10 2 10 36321
        10 5 10 207
        10 10 10 9
        11 1 10 5.12725e+06
        11 11 10 23
        8 1 11 3.09104e+06
        8 2 11 33616
        8 4 11 309
        8 8 11 9
        7 1 12 6.05148e+06
        7 7 12 11
        5 1 13 1.41522e+06
        5 5 13 12
        5 1 14 5.42042e+06
        5 5 14 12
    `,
};

const outputs = {};
for (const key in inputs) {
    const input = inputs[key];
    const output = parse(input);
    outputs[key] = output;
}

const resultsByKey = {};
for (const key in outputs) {
    const output = outputs[key];
    for (const entry of output) {
        const resultKey = getKey(entry);
        if (!resultsByKey[resultKey]) {
            resultsByKey[resultKey] = {
                n: entry.n,
                k: entry.k,
                m: entry.m,
            };
        }
        resultsByKey[resultKey][key] = entry.t / 1000000;
    }
}

const results = Object.values(resultsByKey).sort((a, b) => {
    if (a.k !== b.k) { return a.k - b.k; }
    if (a.n !== b.n) { return a.n - b.n; }
    if (a.m !== b.m) { return a.m - b.m; }
    return 0;
});

const resultStr = results
    .map(result => `${result.n}\t${result.m}\t${result.k}\t${result.noSet_rec}\t${result.set_rec}\t${result.noSet}\t${result.set}`)
    .join("\n");

console.log(`n\tm\tk\tFORK parallelRecursiveDFS\tNO_FORK parallelRecursiveDFS\tFORK parallelDFS\tNO_FORK parallelDFS`);
console.log(resultStr);
